package Chapter12_Object;
class Customer1{
	
}
class Customer2{
	
}

public class AccessModifier {

	public static void main(String[] args) {
		/*
		 * public: 모든영역에서 접근가능
		 * protected: 동일패키지 또는 후손관계까지만 접근 가능
		 * (default):  동일 패키지 까지만 접근 가능,명시하지않아도됨.
		 * private: 해당클래스 내부에서만 접근가능.
		 * 
		 * 클래스접근제한자:public default
		 * 
		 * 멤버변수,멤버메서드  접근제한자: public protected default private
		 * 
		 */
		/*
		 * 캡슐화 : 객체를 외부에서 접근하지 못하도록 캡슐처럼 감싸서 보호하는 것.
		 * 객체지향언어의 3대 특징중 하나.(캡슐화,상속,다형성)
		 * 
		 * 캡슐화의 기본원칙
		 * -클래스 멤버변수에 대한 접근제한은 private로한다
		 * 클래스 멤버변수에대한 연산처리를 목적으로 하는 메서드는 클래슨 내부에 작성한다(멤버메서드)
		 * 멤버 메서드는 클래스 밖에서 접근할 수 있도록 public으로 설정한다(멤버변수에 대한 직접 접근은
		 * 안되지만 메서드를 통한 간접 접근은 허용)
		 * 
		 * 캡슐화의 이점
		 * 	외부프로그램이 특정 객체의 멥버 변수에 접근하여 임의로 값을 변경하지 못하게 만들어 프로그램의 보안
		 * 및 안정성을 높여줄수 있다.
		 * 
		 * 
		 * 
		 * 멤버메서드(함수)
		 * 접근제한자 [예약어] 반환타입 메서드명([자료형 매개변수명,...]){
		 * 	return 반환값;
		 *
		 *자료형매개변수명은 없을 수도 있다.
		 *대괄호는 생략가능함을 뜻한다
		 *
		 */
		

	}

}
